Opening files...
Parsing specification from standard input...
Checking specification...
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
*** Shift/Reduce conflict found in state #67
  between optTypes ::= (*) 
  and     typeDec ::= (*) TYPE ID EQ type optTypes 
  under symbol TYPE
  Resolved in favor of shifting.

*** Shift/Reduce conflict found in state #94
  between optFunctions ::= (*) 
  and     functionDec ::= (*) FUNCTION ID LPAREN fields RPAREN nameType EQ Exp optFunctions 
  under symbol FUNCTION
  Resolved in favor of shifting.

  Checking for non-reduced productions...
Writing parser...
===== Terminals =====
DIVIDE FUNCTION GE LPAREN INT 
ARRAY FOR MINUS RPAREN SEMICOLON 
AND LT TYPE NIL IN 
OR COMMA PLUS ASSIGN IF 
DOT ID LE OF EOF 
error NEQ BREAK EQ LBRACK 
TIMES COLON LBRACE ELSE RBRACK 
TO WHILE LET THEN RBRACE 
END STRING GT VAR DO 


===== Non terminals =====
Var type fieldVar fieldExps nameType 
optFields $START empty sequence typeDec 
subscriptVar functionDec optArguments decList dec 
fields Exp optFunctions optTypes seqTail 
optFieldExps ExpList arguments 

===== Productions =====
empty ::= 
type ::= ARRAY OF ID 
type ::= LBRACE fields RBRACE 
type ::= ID 
nameType ::= COLON ID 
nameType ::= 
nameType ::= error 
fields ::= ID COLON ID optFields 
fields ::= 
fields ::= error 
optTypes ::= typeDec 
optTypes ::= 
optFields ::= COMMA ID COLON ID optFields 
optFields ::= 
optFields ::= error 
optFunctions ::= functionDec 
optFunctions ::= 
seqTail ::= sequence 
seqTail ::= Exp 
sequence ::= Exp SEMICOLON seqTail 
optFieldExps ::= COMMA ID Exp optFieldExps 
optFieldExps ::= 
optFieldExps ::= error 
fieldExps ::= ID EQ Exp optFieldExps 
fieldExps ::= 
fieldExps ::= error 
optArguments ::= COMMA Exp optArguments 
optArguments ::= 
optArguments ::= error 
arguments ::= Exp optArguments 
arguments ::= 
functionDec ::= FUNCTION ID LPAREN fields RPAREN nameType EQ Exp optFunctions 
typeDec ::= TYPE ID EQ type optTypes 
dec ::= typeDec 
dec ::= VAR ID nameType ASSIGN Exp 
dec ::= functionDec 
dec ::= error 
decList ::= dec decList 
decList ::= dec 
subscriptVar ::= subscriptVar LBRACK Exp RBRACK 
subscriptVar ::= fieldVar LBRACK Exp RBRACK 
subscriptVar ::= ID LBRACK Exp RBRACK 
fieldVar ::= Var DOT ID 
ExpList ::= sequence 
ExpList ::= Exp 
ExpList ::= empty 
Var ::= subscriptVar 
Var ::= fieldVar 
Var ::= ID 
Exp ::= FOR ID ASSIGN Exp TO Exp DO Exp 
Exp ::= Var ASSIGN Exp 
Exp ::= ID LPAREN arguments RPAREN 
Exp ::= BREAK 
Exp ::= ID LBRACK Exp RBRACK OF Exp 
Exp ::= WHILE Exp DO Exp 
Exp ::= STRING 
Exp ::= MINUS Exp 
Exp ::= Exp GE Exp 
Exp ::= Exp GT Exp 
Exp ::= Exp LE Exp 
Exp ::= Exp LT Exp 
Exp ::= Exp NEQ Exp 
Exp ::= Exp EQ Exp 
Exp ::= Exp DIVIDE Exp 
Exp ::= Exp TIMES Exp 
Exp ::= Exp MINUS Exp 
Exp ::= Exp PLUS Exp 
Exp ::= NIL 
Exp ::= ID LBRACE fieldExps RBRACE 
Exp ::= INT 
Exp ::= Exp OR Exp 
Exp ::= Exp AND Exp 
Exp ::= IF Exp THEN Exp ELSE Exp 
Exp ::= IF Exp THEN Exp 
Exp ::= LPAREN ExpList RPAREN 
Exp ::= LET decList IN ExpList END 
Exp ::= Var 
Exp ::= error 
$START ::= Exp EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [Var ::= (*) subscriptVar , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) STRING , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp AND Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Var ::= (*) ID , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Exp GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp OR Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) fieldVar , {EOF DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldVar ::= (*) Var DOT ID , {EOF LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [$START ::= (*) Exp EOF , {EOF }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [7]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [1]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= MINUS (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [154]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [2]: {
  [Exp ::= INT (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [3]: {
  [Var ::= (*) subscriptVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= WHILE (*) Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) LET decList IN ExpList END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) BREAK , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Var ::= (*) fieldVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [fieldVar ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [151]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [4]: {
  [subscriptVar ::= fieldVar (*) LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= fieldVar (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on LBRACK to state [148]

-------------------
lalr_state [5]: {
  [Exp ::= FOR (*) ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on ID to state [141]

-------------------
lalr_state [6]: {
  [Exp ::= NIL (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [7]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) TIMES Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) OR Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) EQ Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) MINUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) AND Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) GE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) PLUS Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [$START ::= Exp (*) EOF , {EOF }]
  [Exp ::= Exp (*) GT Exp , {EOF PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on EOF to state [140]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [8]: {
  [Exp ::= STRING (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [9]: {
  [Var ::= (*) subscriptVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= IF (*) Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= IF (*) Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Exp AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) LET decList IN ExpList END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) BREAK , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Exp OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Var ::= (*) fieldVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [fieldVar ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [135]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [10]: {
  [Var ::= subscriptVar (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= subscriptVar (*) LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on LBRACK to state [132]

-------------------
lalr_state [11]: {
  [Exp ::= ID (*) LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= ID (*) LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= ID (*) LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= ID (*) LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= ID (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on LPAREN to state [107]
transition on LBRACK to state [106]
transition on LBRACE to state [105]

-------------------
lalr_state [12]: {
  [Exp ::= error (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [13]: {
  [dec ::= (*) functionDec , {error IN FUNCTION VAR TYPE }]
  [decList ::= (*) dec , {IN }]
  [dec ::= (*) typeDec , {error IN FUNCTION VAR TYPE }]
  [dec ::= (*) error , {error IN FUNCTION VAR TYPE }]
  [functionDec ::= (*) FUNCTION ID LPAREN fields RPAREN nameType EQ Exp optFunctions , {error IN FUNCTION VAR TYPE }]
  [dec ::= (*) VAR ID nameType ASSIGN Exp , {error IN FUNCTION VAR TYPE }]
  [decList ::= (*) dec decList , {IN }]
  [Exp ::= LET (*) decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [typeDec ::= (*) TYPE ID EQ type optTypes , {error IN FUNCTION VAR TYPE }]
}
transition on functionDec to state [61]
transition on dec to state [60]
transition on TYPE to state [59]
transition on FUNCTION to state [58]
transition on error to state [57]
transition on typeDec to state [56]
transition on VAR to state [55]
transition on decList to state [54]

-------------------
lalr_state [14]: {
  [sequence ::= (*) Exp SEMICOLON seqTail , {RPAREN }]
  [Var ::= (*) subscriptVar , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [empty ::= (*) , {RPAREN }]
  [ExpList ::= (*) empty , {RPAREN }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ExpList ::= (*) Exp , {RPAREN }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp AND Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Var ::= (*) ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LET decList IN ExpList END , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [ExpList ::= (*) sequence , {RPAREN }]
  [Exp ::= (*) BREAK , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp OR Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) fieldVar , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= LPAREN (*) ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldVar ::= (*) Var DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on ExpList to state [48]
transition on FOR to state [5]
transition on LET to state [13]
transition on error to state [12]
transition on MINUS to state [1]
transition on Exp to state [47]
transition on BREAK to state [15]
transition on STRING to state [8]
transition on subscriptVar to state [10]
transition on sequence to state [46]
transition on empty to state [45]
transition on ID to state [11]
transition on NIL to state [6]
transition on LPAREN to state [14]
transition on IF to state [9]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on Var to state [16]
transition on INT to state [2]

-------------------
lalr_state [15]: {
  [Exp ::= BREAK (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [16]: {
  [Exp ::= Var (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Var (*) ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= Var (*) DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on ASSIGN to state [18]
transition on DOT to state [17]

-------------------
lalr_state [17]: {
  [fieldVar ::= Var DOT (*) ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on ID to state [44]

-------------------
lalr_state [18]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Var ASSIGN (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [19]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [19]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Var ASSIGN Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [20]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp MINUS (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [43]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [21]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp AND (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [42]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [22]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp DIVIDE (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [41]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [23]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp GE (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [40]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [24]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp NEQ (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [39]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [25]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp PLUS (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [38]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [26]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp EQ (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [37]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [27]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp LE (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [36]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [28]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp GT (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [35]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [29]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp TIMES (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [34]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [30]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp LT (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [33]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [31]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp OR (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [32]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [32]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp OR Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [33]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp LT Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [34]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp TIMES Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [35]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp GT Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [36]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp LE Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [37]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp EQ Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [38]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp PLUS Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [39]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp NEQ Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [40]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp GE Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [41]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp DIVIDE Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [42]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp AND Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [43]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp MINUS Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [44]: {
  [fieldVar ::= Var DOT ID (*) , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [45]: {
  [ExpList ::= empty (*) , {RPAREN END }]
}

-------------------
lalr_state [46]: {
  [ExpList ::= sequence (*) , {RPAREN END }]
}

-------------------
lalr_state [47]: {
  [Exp ::= Exp (*) NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [ExpList ::= Exp (*) , {RPAREN END }]
  [Exp ::= Exp (*) OR Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [sequence ::= Exp (*) SEMICOLON seqTail , {RPAREN END }]
  [Exp ::= Exp (*) AND Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on SEMICOLON to state [50]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [48]: {
  [Exp ::= LPAREN ExpList (*) RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on RPAREN to state [49]

-------------------
lalr_state [49]: {
  [Exp ::= LPAREN ExpList RPAREN (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [50]: {
  [sequence ::= Exp SEMICOLON (*) seqTail , {RPAREN END }]
  [sequence ::= (*) Exp SEMICOLON seqTail , {RPAREN END }]
  [Var ::= (*) subscriptVar , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) STRING , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) IF Exp THEN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) error , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [seqTail ::= (*) Exp , {RPAREN END }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) NIL , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Var , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [seqTail ::= (*) sequence , {RPAREN END }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp AND Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Var ::= (*) ID , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) LET decList IN ExpList END , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) BREAK , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp OR Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Var ::= (*) fieldVar , {SEMICOLON RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [fieldVar ::= (*) Var DOT ID , {SEMICOLON RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) INT , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
}
transition on FOR to state [5]
transition on seqTail to state [53]
transition on LET to state [13]
transition on error to state [12]
transition on MINUS to state [1]
transition on Exp to state [52]
transition on BREAK to state [15]
transition on STRING to state [8]
transition on subscriptVar to state [10]
transition on sequence to state [51]
transition on ID to state [11]
transition on NIL to state [6]
transition on LPAREN to state [14]
transition on IF to state [9]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on Var to state [16]
transition on INT to state [2]

-------------------
lalr_state [51]: {
  [seqTail ::= sequence (*) , {RPAREN END }]
}

-------------------
lalr_state [52]: {
  [Exp ::= Exp (*) NEQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) TIMES Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [seqTail ::= Exp (*) , {RPAREN END }]
  [Exp ::= Exp (*) OR Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) LE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) EQ Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) MINUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [sequence ::= Exp (*) SEMICOLON seqTail , {RPAREN END }]
  [Exp ::= Exp (*) AND Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) GE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) LT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) DIVIDE Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) PLUS Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= Exp (*) GT Exp , {SEMICOLON RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on SEMICOLON to state [50]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [53]: {
  [sequence ::= Exp SEMICOLON seqTail (*) , {RPAREN END }]
}

-------------------
lalr_state [54]: {
  [Exp ::= LET decList (*) IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on IN to state [102]

-------------------
lalr_state [55]: {
  [dec ::= VAR (*) ID nameType ASSIGN Exp , {error IN FUNCTION VAR TYPE }]
}
transition on ID to state [98]

-------------------
lalr_state [56]: {
  [dec ::= typeDec (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [57]: {
  [dec ::= error (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [58]: {
  [functionDec ::= FUNCTION (*) ID LPAREN fields RPAREN nameType EQ Exp optFunctions , {error IN FUNCTION VAR TYPE }]
}
transition on ID to state [86]

-------------------
lalr_state [59]: {
  [typeDec ::= TYPE (*) ID EQ type optTypes , {error IN FUNCTION VAR TYPE }]
}
transition on ID to state [63]

-------------------
lalr_state [60]: {
  [decList ::= dec (*) , {IN }]
  [dec ::= (*) functionDec , {error IN FUNCTION VAR TYPE }]
  [decList ::= (*) dec , {IN }]
  [dec ::= (*) typeDec , {error IN FUNCTION VAR TYPE }]
  [dec ::= (*) error , {error IN FUNCTION VAR TYPE }]
  [functionDec ::= (*) FUNCTION ID LPAREN fields RPAREN nameType EQ Exp optFunctions , {error IN FUNCTION VAR TYPE }]
  [decList ::= dec (*) decList , {IN }]
  [dec ::= (*) VAR ID nameType ASSIGN Exp , {error IN FUNCTION VAR TYPE }]
  [decList ::= (*) dec decList , {IN }]
  [typeDec ::= (*) TYPE ID EQ type optTypes , {error IN FUNCTION VAR TYPE }]
}
transition on functionDec to state [61]
transition on dec to state [60]
transition on TYPE to state [59]
transition on FUNCTION to state [58]
transition on error to state [57]
transition on typeDec to state [56]
transition on decList to state [62]
transition on VAR to state [55]

-------------------
lalr_state [61]: {
  [dec ::= functionDec (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [62]: {
  [decList ::= dec decList (*) , {IN }]
}

-------------------
lalr_state [63]: {
  [typeDec ::= TYPE ID (*) EQ type optTypes , {error IN FUNCTION VAR TYPE }]
}
transition on EQ to state [64]

-------------------
lalr_state [64]: {
  [type ::= (*) LBRACE fields RBRACE , {error IN FUNCTION VAR TYPE }]
  [type ::= (*) ID , {error IN FUNCTION VAR TYPE }]
  [type ::= (*) ARRAY OF ID , {error IN FUNCTION VAR TYPE }]
  [typeDec ::= TYPE ID EQ (*) type optTypes , {error IN FUNCTION VAR TYPE }]
}
transition on ARRAY to state [68]
transition on type to state [67]
transition on LBRACE to state [66]
transition on ID to state [65]

-------------------
lalr_state [65]: {
  [type ::= ID (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [66]: {
  [fields ::= (*) ID COLON ID optFields , {RBRACE }]
  [type ::= LBRACE (*) fields RBRACE , {error IN FUNCTION VAR TYPE }]
  [fields ::= (*) , {RBRACE }]
  [fields ::= (*) error , {RBRACE }]
}
transition on error to state [75]
transition on ID to state [74]
transition on fields to state [73]

-------------------
lalr_state [67]: {
  [typeDec ::= (*) TYPE ID EQ type optTypes , {error IN FUNCTION VAR TYPE }]
  [optTypes ::= (*) typeDec , {error IN FUNCTION VAR TYPE }]
  [optTypes ::= (*) , {error IN FUNCTION VAR TYPE }]
  [typeDec ::= TYPE ID EQ type (*) optTypes , {error IN FUNCTION VAR TYPE }]
}
transition on TYPE to state [59]
transition on optTypes to state [72]
transition on typeDec to state [71]

-------------------
lalr_state [68]: {
  [type ::= ARRAY (*) OF ID , {error IN FUNCTION VAR TYPE }]
}
transition on OF to state [69]

-------------------
lalr_state [69]: {
  [type ::= ARRAY OF (*) ID , {error IN FUNCTION VAR TYPE }]
}
transition on ID to state [70]

-------------------
lalr_state [70]: {
  [type ::= ARRAY OF ID (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [71]: {
  [optTypes ::= typeDec (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [72]: {
  [typeDec ::= TYPE ID EQ type optTypes (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [73]: {
  [type ::= LBRACE fields (*) RBRACE , {error IN FUNCTION VAR TYPE }]
}
transition on RBRACE to state [85]

-------------------
lalr_state [74]: {
  [fields ::= ID (*) COLON ID optFields , {RPAREN RBRACE }]
}
transition on COLON to state [76]

-------------------
lalr_state [75]: {
  [fields ::= error (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [76]: {
  [fields ::= ID COLON (*) ID optFields , {RPAREN RBRACE }]
}
transition on ID to state [77]

-------------------
lalr_state [77]: {
  [optFields ::= (*) , {RPAREN RBRACE }]
  [optFields ::= (*) error , {RPAREN RBRACE }]
  [fields ::= ID COLON ID (*) optFields , {RPAREN RBRACE }]
  [optFields ::= (*) COMMA ID COLON ID optFields , {RPAREN RBRACE }]
}
transition on optFields to state [80]
transition on error to state [79]
transition on COMMA to state [78]

-------------------
lalr_state [78]: {
  [optFields ::= COMMA (*) ID COLON ID optFields , {RPAREN RBRACE }]
}
transition on ID to state [81]

-------------------
lalr_state [79]: {
  [optFields ::= error (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [80]: {
  [fields ::= ID COLON ID optFields (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [81]: {
  [optFields ::= COMMA ID (*) COLON ID optFields , {RPAREN RBRACE }]
}
transition on COLON to state [82]

-------------------
lalr_state [82]: {
  [optFields ::= COMMA ID COLON (*) ID optFields , {RPAREN RBRACE }]
}
transition on ID to state [83]

-------------------
lalr_state [83]: {
  [optFields ::= (*) , {RPAREN RBRACE }]
  [optFields ::= COMMA ID COLON ID (*) optFields , {RPAREN RBRACE }]
  [optFields ::= (*) error , {RPAREN RBRACE }]
  [optFields ::= (*) COMMA ID COLON ID optFields , {RPAREN RBRACE }]
}
transition on optFields to state [84]
transition on error to state [79]
transition on COMMA to state [78]

-------------------
lalr_state [84]: {
  [optFields ::= COMMA ID COLON ID optFields (*) , {RPAREN RBRACE }]
}

-------------------
lalr_state [85]: {
  [type ::= LBRACE fields RBRACE (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [86]: {
  [functionDec ::= FUNCTION ID (*) LPAREN fields RPAREN nameType EQ Exp optFunctions , {error IN FUNCTION VAR TYPE }]
}
transition on LPAREN to state [87]

-------------------
lalr_state [87]: {
  [fields ::= (*) ID COLON ID optFields , {RPAREN }]
  [fields ::= (*) , {RPAREN }]
  [functionDec ::= FUNCTION ID LPAREN (*) fields RPAREN nameType EQ Exp optFunctions , {error IN FUNCTION VAR TYPE }]
  [fields ::= (*) error , {RPAREN }]
}
transition on error to state [75]
transition on ID to state [74]
transition on fields to state [88]

-------------------
lalr_state [88]: {
  [functionDec ::= FUNCTION ID LPAREN fields (*) RPAREN nameType EQ Exp optFunctions , {error IN FUNCTION VAR TYPE }]
}
transition on RPAREN to state [89]

-------------------
lalr_state [89]: {
  [nameType ::= (*) COLON ID , {EQ }]
  [nameType ::= (*) , {EQ }]
  [functionDec ::= FUNCTION ID LPAREN fields RPAREN (*) nameType EQ Exp optFunctions , {error IN FUNCTION VAR TYPE }]
  [nameType ::= (*) error , {EQ }]
}
transition on nameType to state [92]
transition on COLON to state [91]
transition on error to state [90]

-------------------
lalr_state [90]: {
  [nameType ::= error (*) , {EQ ASSIGN }]
}

-------------------
lalr_state [91]: {
  [nameType ::= COLON (*) ID , {EQ ASSIGN }]
}
transition on ID to state [97]

-------------------
lalr_state [92]: {
  [functionDec ::= FUNCTION ID LPAREN fields RPAREN nameType (*) EQ Exp optFunctions , {error IN FUNCTION VAR TYPE }]
}
transition on EQ to state [93]

-------------------
lalr_state [93]: {
  [Var ::= (*) subscriptVar , {error DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {error LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [functionDec ::= FUNCTION ID LPAREN fields RPAREN nameType EQ (*) Exp optFunctions , {error IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {error LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {error LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {error DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {error DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {error LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [94]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [94]: {
  [Exp ::= Exp (*) NEQ Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [optFunctions ::= (*) functionDec , {error IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [functionDec ::= FUNCTION ID LPAREN fields RPAREN nameType EQ Exp (*) optFunctions , {error IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [optFunctions ::= (*) , {error IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [functionDec ::= (*) FUNCTION ID LPAREN fields RPAREN nameType EQ Exp optFunctions , {error IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on FUNCTION to state [58]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on functionDec to state [96]
transition on optFunctions to state [95]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on MINUS to state [20]
transition on AND to state [21]

-------------------
lalr_state [95]: {
  [functionDec ::= FUNCTION ID LPAREN fields RPAREN nameType EQ Exp optFunctions (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [96]: {
  [optFunctions ::= functionDec (*) , {error IN FUNCTION VAR TYPE }]
}

-------------------
lalr_state [97]: {
  [nameType ::= COLON ID (*) , {EQ ASSIGN }]
}

-------------------
lalr_state [98]: {
  [nameType ::= (*) COLON ID , {ASSIGN }]
  [nameType ::= (*) , {ASSIGN }]
  [nameType ::= (*) error , {ASSIGN }]
  [dec ::= VAR ID (*) nameType ASSIGN Exp , {error IN FUNCTION VAR TYPE }]
}
transition on nameType to state [99]
transition on COLON to state [91]
transition on error to state [90]

-------------------
lalr_state [99]: {
  [dec ::= VAR ID nameType (*) ASSIGN Exp , {error IN FUNCTION VAR TYPE }]
}
transition on ASSIGN to state [100]

-------------------
lalr_state [100]: {
  [Var ::= (*) subscriptVar , {error DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {error LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {error LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {error LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {error DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [dec ::= VAR ID nameType ASSIGN (*) Exp , {error IN FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {error DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {error LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN IN FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [101]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [101]: {
  [Exp ::= Exp (*) NEQ Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [dec ::= VAR ID nameType ASSIGN Exp (*) , {error IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {error PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR IN FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [102]: {
  [sequence ::= (*) Exp SEMICOLON seqTail , {END }]
  [Var ::= (*) subscriptVar , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) STRING , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp TIMES Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) IF Exp THEN Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {SEMICOLON LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) Var ASSIGN Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp LE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) error , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [empty ::= (*) , {END }]
  [ExpList ::= (*) empty , {END }]
  [Exp ::= (*) WHILE Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp DIVIDE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {SEMICOLON LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp GT Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) NIL , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Var , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [ExpList ::= (*) Exp , {END }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp EQ Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp AND Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {SEMICOLON LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Var ::= (*) ID , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= LET decList IN (*) ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp PLUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) LET decList IN ExpList END , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [ExpList ::= (*) sequence , {END }]
  [Exp ::= (*) BREAK , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp NEQ Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp OR Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Var ::= (*) fieldVar , {SEMICOLON DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) MINUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp MINUS Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [fieldVar ::= (*) Var DOT ID , {SEMICOLON LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN END }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) Exp LT Exp , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
  [Exp ::= (*) INT , {SEMICOLON PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR END }]
}
transition on ExpList to state [103]
transition on FOR to state [5]
transition on LET to state [13]
transition on error to state [12]
transition on MINUS to state [1]
transition on Exp to state [47]
transition on BREAK to state [15]
transition on STRING to state [8]
transition on subscriptVar to state [10]
transition on sequence to state [46]
transition on empty to state [45]
transition on ID to state [11]
transition on NIL to state [6]
transition on LPAREN to state [14]
transition on IF to state [9]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on Var to state [16]
transition on INT to state [2]

-------------------
lalr_state [103]: {
  [Exp ::= LET decList IN ExpList (*) END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on END to state [104]

-------------------
lalr_state [104]: {
  [Exp ::= LET decList IN ExpList END (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [105]: {
  [Exp ::= ID LBRACE (*) fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldExps ::= (*) , {RBRACE }]
  [fieldExps ::= (*) error , {RBRACE }]
  [fieldExps ::= (*) ID EQ Exp optFieldExps , {RBRACE }]
}
transition on fieldExps to state [122]
transition on error to state [121]
transition on ID to state [120]

-------------------
lalr_state [106]: {
  [Var ::= (*) subscriptVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= ID LBRACK (*) Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= ID LBRACK (*) Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Var ::= (*) ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LET decList IN ExpList END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) fieldVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [116]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [107]: {
  [Var ::= (*) subscriptVar , {error COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) STRING , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp TIMES Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {error COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Var ASSIGN Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WHILE Exp DO Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp DIVIDE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {error COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp GT Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp EQ Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp AND Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [arguments ::= (*) , {RPAREN }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {error COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Var ::= (*) ID , {error COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Exp GE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp PLUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LET decList IN ExpList END , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp NEQ Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp OR Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [arguments ::= (*) Exp optArguments , {RPAREN }]
  [Var ::= (*) fieldVar , {error COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) MINUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp MINUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= ID LPAREN (*) arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {error COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LT Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [109]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on arguments to state [108]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [108]: {
  [Exp ::= ID LPAREN arguments (*) RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on RPAREN to state [115]

-------------------
lalr_state [109]: {
  [Exp ::= Exp (*) NEQ Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) TIMES Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) OR Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optArguments ::= (*) , {RPAREN }]
  [Exp ::= Exp (*) LE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) EQ Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) MINUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) AND Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optArguments ::= (*) error , {RPAREN }]
  [Exp ::= Exp (*) GE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LT Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) DIVIDE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) PLUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optArguments ::= (*) COMMA Exp optArguments , {RPAREN }]
  [arguments ::= Exp (*) optArguments , {RPAREN }]
  [Exp ::= Exp (*) GT Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on optArguments to state [112]
transition on TIMES to state [29]
transition on error to state [111]
transition on COMMA to state [110]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [110]: {
  [Var ::= (*) subscriptVar , {error COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) STRING , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp TIMES Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {error COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Var ASSIGN Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WHILE Exp DO Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp DIVIDE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {error COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp GT Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optArguments ::= COMMA (*) Exp optArguments , {RPAREN }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp EQ Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp AND Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {error COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Var ::= (*) ID , {error COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Exp GE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp PLUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LET decList IN ExpList END , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp NEQ Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp OR Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) fieldVar , {error COMMA RPAREN DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) MINUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp MINUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldVar ::= (*) Var DOT ID , {error COMMA RPAREN LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LT Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [113]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [111]: {
  [optArguments ::= error (*) , {RPAREN }]
}

-------------------
lalr_state [112]: {
  [arguments ::= Exp optArguments (*) , {RPAREN }]
}

-------------------
lalr_state [113]: {
  [Exp ::= Exp (*) NEQ Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) TIMES Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) OR Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optArguments ::= (*) , {RPAREN }]
  [Exp ::= Exp (*) LE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) EQ Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) MINUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) AND Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optArguments ::= (*) error , {RPAREN }]
  [Exp ::= Exp (*) GE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LT Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) DIVIDE Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) PLUS Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optArguments ::= COMMA Exp (*) optArguments , {RPAREN }]
  [optArguments ::= (*) COMMA Exp optArguments , {RPAREN }]
  [Exp ::= Exp (*) GT Exp , {error COMMA RPAREN PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on optArguments to state [114]
transition on TIMES to state [29]
transition on error to state [111]
transition on COMMA to state [110]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [114]: {
  [optArguments ::= COMMA Exp optArguments (*) , {RPAREN }]
}

-------------------
lalr_state [115]: {
  [Exp ::= ID LPAREN arguments RPAREN (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [116]: {
  [Exp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= ID LBRACK Exp (*) RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= ID LBRACK Exp (*) RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on RBRACK to state [117]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [117]: {
  [subscriptVar ::= ID LBRACK Exp RBRACK (*) , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= ID LBRACK Exp RBRACK (*) OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OF to state [118]

-------------------
lalr_state [118]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= ID LBRACK Exp RBRACK OF (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [119]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [119]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= ID LBRACK Exp RBRACK OF Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [120]: {
  [fieldExps ::= ID (*) EQ Exp optFieldExps , {RBRACE }]
}
transition on EQ to state [124]

-------------------
lalr_state [121]: {
  [fieldExps ::= error (*) , {RBRACE }]
}

-------------------
lalr_state [122]: {
  [Exp ::= ID LBRACE fieldExps (*) RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on RBRACE to state [123]

-------------------
lalr_state [123]: {
  [Exp ::= ID LBRACE fieldExps RBRACE (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [124]: {
  [Var ::= (*) subscriptVar , {error COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) STRING , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp TIMES Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldExps ::= ID EQ (*) Exp optFieldExps , {RBRACE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {error COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Var ASSIGN Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WHILE Exp DO Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp DIVIDE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {error COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp GT Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp EQ Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp AND Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {error COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Var ::= (*) ID , {error COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Exp GE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp PLUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LET decList IN ExpList END , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp NEQ Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp OR Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) fieldVar , {error COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) MINUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp MINUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldVar ::= (*) Var DOT ID , {error COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LT Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [125]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [125]: {
  [Exp ::= Exp (*) NEQ Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) TIMES Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optFieldExps ::= (*) , {RBRACE }]
  [Exp ::= Exp (*) OR Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) EQ Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) MINUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optFieldExps ::= (*) error , {RBRACE }]
  [Exp ::= Exp (*) AND Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) GE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LT Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldExps ::= ID EQ Exp (*) optFieldExps , {RBRACE }]
  [Exp ::= Exp (*) DIVIDE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) PLUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optFieldExps ::= (*) COMMA ID Exp optFieldExps , {RBRACE }]
  [Exp ::= Exp (*) GT Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on error to state [128]
transition on COMMA to state [127]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on optFieldExps to state [126]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [126]: {
  [fieldExps ::= ID EQ Exp optFieldExps (*) , {RBRACE }]
}

-------------------
lalr_state [127]: {
  [optFieldExps ::= COMMA (*) ID Exp optFieldExps , {RBRACE }]
}
transition on ID to state [129]

-------------------
lalr_state [128]: {
  [optFieldExps ::= error (*) , {RBRACE }]
}

-------------------
lalr_state [129]: {
  [Var ::= (*) subscriptVar , {error COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) STRING , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp TIMES Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {error COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Var ASSIGN Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WHILE Exp DO Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp DIVIDE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {error COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp GT Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp EQ Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp AND Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {error COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Var ::= (*) ID , {error COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Exp GE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp PLUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LET decList IN ExpList END , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp NEQ Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp OR Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optFieldExps ::= COMMA ID (*) Exp optFieldExps , {RBRACE }]
  [Var ::= (*) fieldVar , {error COMMA RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) MINUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp MINUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldVar ::= (*) Var DOT ID , {error COMMA LBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LT Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [130]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [130]: {
  [Exp ::= Exp (*) NEQ Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) TIMES Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optFieldExps ::= (*) , {RBRACE }]
  [Exp ::= Exp (*) OR Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) EQ Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) MINUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optFieldExps ::= (*) error , {RBRACE }]
  [Exp ::= Exp (*) AND Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) GE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LT Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optFieldExps ::= COMMA ID Exp (*) optFieldExps , {RBRACE }]
  [Exp ::= Exp (*) DIVIDE Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) PLUS Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [optFieldExps ::= (*) COMMA ID Exp optFieldExps , {RBRACE }]
  [Exp ::= Exp (*) GT Exp , {error COMMA RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on error to state [128]
transition on COMMA to state [127]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on optFieldExps to state [131]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [131]: {
  [optFieldExps ::= COMMA ID Exp optFieldExps (*) , {RBRACE }]
}

-------------------
lalr_state [132]: {
  [Var ::= (*) subscriptVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= subscriptVar LBRACK (*) Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Var ::= (*) ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LET decList IN ExpList END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) fieldVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [133]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [133]: {
  [Exp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= subscriptVar LBRACK Exp (*) RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on RBRACK to state [134]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [134]: {
  [subscriptVar ::= subscriptVar LBRACK Exp RBRACK (*) , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [135]: {
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= Exp (*) OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= IF Exp (*) THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= Exp (*) AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
  [Exp ::= IF Exp (*) THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on THEN to state [136]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [136]: {
  [Exp ::= IF Exp THEN (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= IF Exp THEN (*) Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [137]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [137]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= IF Exp THEN Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= IF Exp THEN Exp (*) ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on ELSE to state [138]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [138]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= IF Exp THEN Exp ELSE (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [139]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [139]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= IF Exp THEN Exp ELSE Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [140]: {
  [$START ::= Exp EOF (*) , {EOF }]
}

-------------------
lalr_state [141]: {
  [Exp ::= FOR ID (*) ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on ASSIGN to state [142]

-------------------
lalr_state [142]: {
  [Var ::= (*) subscriptVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= FOR ID ASSIGN (*) Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) LET decList IN ExpList END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) BREAK , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Var ::= (*) fieldVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [fieldVar ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN TO }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [143]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [143]: {
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= FOR ID ASSIGN Exp (*) TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR TO }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on TO to state [144]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [144]: {
  [Var ::= (*) subscriptVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) STRING , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) IF Exp THEN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) Var ASSIGN Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) error , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) WHILE Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= FOR ID ASSIGN Exp TO (*) Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) NIL , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Var , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Var ::= (*) ID , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) Exp GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) LET decList IN ExpList END , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) BREAK , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Var ::= (*) fieldVar , {DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [fieldVar ::= (*) Var DOT ID , {LBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN DO }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) Exp LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= (*) INT , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [145]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [145]: {
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= FOR ID ASSIGN Exp TO Exp (*) DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
}
transition on OR to state [31]
transition on DO to state [146]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [146]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= FOR ID ASSIGN Exp TO Exp DO (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [147]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [147]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= FOR ID ASSIGN Exp TO Exp DO Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [148]: {
  [Var ::= (*) subscriptVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) STRING , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Var ASSIGN Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) error , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) WHILE Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= fieldVar LBRACK (*) Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) NIL , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Var , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Var ::= (*) ID , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) Exp GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LET decList IN ExpList END , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) BREAK , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Var ::= (*) fieldVar , {RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [fieldVar ::= (*) Var DOT ID , {LBRACK RBRACK DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) Exp LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= (*) INT , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [149]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [149]: {
  [Exp ::= Exp (*) NEQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) TIMES Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) OR Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) EQ Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) MINUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) AND Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [subscriptVar ::= fieldVar LBRACK Exp (*) RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) LT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) DIVIDE Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) PLUS Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
  [Exp ::= Exp (*) GT Exp , {RBRACK PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on RBRACK to state [150]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [150]: {
  [subscriptVar ::= fieldVar LBRACK Exp RBRACK (*) , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}

-------------------
lalr_state [151]: {
  [Exp ::= Exp (*) NEQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) TIMES Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) OR Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) LE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) EQ Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) MINUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) AND Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= WHILE Exp (*) DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) LT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) DIVIDE Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) PLUS Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
  [Exp ::= Exp (*) GT Exp , {PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR DO }]
}
transition on OR to state [31]
transition on DO to state [152]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [152]: {
  [Var ::= (*) subscriptVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) STRING , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) ID LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var ASSIGN Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACE fieldExps RBRACE , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) error , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= WHILE Exp DO (*) Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) WHILE Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) IF Exp THEN Exp ELSE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) fieldVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) FOR ID ASSIGN Exp TO Exp DO Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) NIL , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Var , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LBRACK Exp RBRACK OF Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [subscriptVar ::= (*) subscriptVar LBRACK Exp RBRACK , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) ID , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LET decList IN ExpList END , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) BREAK , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Var ::= (*) fieldVar , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) LPAREN ExpList RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [fieldVar ::= (*) Var DOT ID , {EOF error COMMA SEMICOLON RPAREN LBRACK RBRACK RBRACE DOT PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR ASSIGN THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) ID LPAREN arguments RPAREN , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) Exp LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= (*) INT , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on Var to state [16]
transition on BREAK to state [15]
transition on LPAREN to state [14]
transition on LET to state [13]
transition on error to state [12]
transition on ID to state [11]
transition on subscriptVar to state [10]
transition on IF to state [9]
transition on STRING to state [8]
transition on Exp to state [153]
transition on NIL to state [6]
transition on FOR to state [5]
transition on fieldVar to state [4]
transition on WHILE to state [3]
transition on INT to state [2]
transition on MINUS to state [1]

-------------------
lalr_state [153]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= WHILE Exp DO Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
lalr_state [154]: {
  [Exp ::= Exp (*) NEQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) TIMES Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) OR Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= MINUS Exp (*) , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) EQ Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) MINUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) AND Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) LT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) DIVIDE Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) PLUS Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
  [Exp ::= Exp (*) GT Exp , {EOF error COMMA SEMICOLON RPAREN RBRACK RBRACE PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE AND OR THEN ELSE TO DO IN END FUNCTION VAR TYPE }]
}
transition on OR to state [31]
transition on LT to state [30]
transition on TIMES to state [29]
transition on GT to state [28]
transition on LE to state [27]
transition on EQ to state [26]
transition on PLUS to state [25]
transition on NEQ to state [24]
transition on GE to state [23]
transition on DIVIDE to state [22]
transition on AND to state [21]
transition on MINUS to state [20]

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 2 warnings
  45 terminals, 23 non terminals, and 79 productions declared, 
  producing 155 unique parse states.
  0 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  2 conflicts detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
