
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Sat Feb 22 15:08:25 CST 2014
//----------------------------------------------------

package Parse;


public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {1, 1},     {1, 1},     {1, 5},     {1, 3}, 
        {1, 4},     {1, 6},     {1, 3},     {1, 3},     {1, 1}, 
        {1, 4},     {1, 1},     {1, 3},     {1, 3},     {1, 3}, 
        {1, 3},     {1, 3},     {1, 3},     {1, 3},     {1, 3}, 
        {1, 3},     {1, 3},     {1, 2},     {1, 1},     {1, 4}, 
        {1, 6},     {1, 1},     {1, 4},     {1, 3},     {1, 8}, 
        {2, 1},     {2, 1},     {2, 1},     {3, 1},     {3, 1}, 
        {3, 1},     {8, 3},     {9, 4},     {9, 4},     {9, 4}, 
        {10, 1},     {10, 2},     {11, 1},     {11, 1},     {11, 5}, 
        {11, 1},     {12, 5},     {14, 9},     {4, 0},     {4, 2}, 
        {5, 1},     {5, 0},     {5, 3},     {20, 1},     {20, 0}, 
        {20, 4},     {21, 1},     {21, 0},     {21, 4},     {6, 3}, 
        {7, 1},     {7, 1},     {15, 0},     {15, 1},     {19, 1}, 
        {19, 0},     {19, 5},     {13, 0},     {13, 1},     {18, 1}, 
        {18, 0},     {18, 4},     {17, 1},     {17, 0},     {17, 2}, 
        {16, 1},     {16, 3},     {16, 3},     {22, 0}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*1*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*2*/{0,-10,1,-10,5,-10,7,-10,9,-10,11,-10,13,-10,15,-10,16,-10,17,-10,18,-10,19,-10,20,-10,21,-10,22,-10,23,-10,24,-10,25,-10,26,-10,30,-10,31,-10,34,-10,35,-10,37,-10,38,-10,42,-10,43,-10,44,-10,-1,0},
    /*3*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*4*/{0,-32,1,-32,5,-32,7,-32,9,-32,10,149,11,-32,13,-32,14,-32,15,-32,16,-32,17,-32,18,-32,19,-32,20,-32,21,-32,22,-32,23,-32,24,-32,25,-32,26,-32,27,-32,30,-32,31,-32,34,-32,35,-32,37,-32,38,-32,42,-32,43,-32,44,-32,-1,0},
    /*5*/{2,142,-1,0},
    /*6*/{0,-12,1,-12,5,-12,7,-12,9,-12,11,-12,13,-12,15,-12,16,-12,17,-12,18,-12,19,-12,20,-12,21,-12,22,-12,23,-12,24,-12,25,-12,26,-12,30,-12,31,-12,34,-12,35,-12,37,-12,38,-12,42,-12,43,-12,44,-12,-1,0},
    /*7*/{0,141,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,-1,0},
    /*8*/{0,-24,1,-24,5,-24,7,-24,9,-24,11,-24,13,-24,15,-24,16,-24,17,-24,18,-24,19,-24,20,-24,21,-24,22,-24,23,-24,24,-24,25,-24,26,-24,30,-24,31,-24,34,-24,35,-24,37,-24,38,-24,42,-24,43,-24,44,-24,-1,0},
    /*9*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*10*/{0,-33,1,-33,5,-33,7,-33,9,-33,10,133,11,-33,13,-33,14,-33,15,-33,16,-33,17,-33,18,-33,19,-33,20,-33,21,-33,22,-33,23,-33,24,-33,25,-33,26,-33,27,-33,30,-33,31,-33,34,-33,35,-33,37,-33,38,-33,42,-33,43,-33,44,-33,-1,0},
    /*11*/{0,-31,1,-31,5,-31,7,-31,8,108,9,-31,10,107,11,-31,12,106,13,-31,14,-31,15,-31,16,-31,17,-31,18,-31,19,-31,20,-31,21,-31,22,-31,23,-31,24,-31,25,-31,26,-31,27,-31,30,-31,31,-31,34,-31,35,-31,37,-31,38,-31,42,-31,43,-31,44,-31,-1,0},
    /*12*/{0,-2,1,-2,5,-2,7,-2,9,-2,11,-2,13,-2,15,-2,16,-2,17,-2,18,-2,19,-2,20,-2,21,-2,22,-2,23,-2,24,-2,25,-2,26,-2,30,-2,31,-2,34,-2,35,-2,37,-2,38,-2,42,-2,43,-2,44,-2,-1,0},
    /*13*/{1,58,42,59,43,56,44,60,-1,0},
    /*14*/{1,13,2,12,3,9,4,3,8,15,9,-79,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*15*/{0,-27,1,-27,5,-27,7,-27,9,-27,11,-27,13,-27,15,-27,16,-27,17,-27,18,-27,19,-27,20,-27,21,-27,22,-27,23,-27,24,-27,25,-27,26,-27,30,-27,31,-27,34,-27,35,-27,37,-27,38,-27,42,-27,43,-27,44,-27,-1,0},
    /*16*/{0,-3,1,-3,5,-3,7,-3,9,-3,11,-3,13,-3,14,18,15,-3,16,-3,17,-3,18,-3,19,-3,20,-3,21,-3,22,-3,23,-3,24,-3,25,-3,26,-3,27,19,30,-3,31,-3,34,-3,35,-3,37,-3,38,-3,42,-3,43,-3,44,-3,-1,0},
    /*17*/{2,45,-1,0},
    /*18*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*19*/{0,-29,1,-29,5,-29,7,-29,9,-29,11,-29,13,-29,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,30,-29,31,-29,34,-29,35,-29,37,-29,38,-29,42,-29,43,-29,44,-29,-1,0},
    /*20*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*21*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*22*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*23*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*24*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*25*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*26*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*27*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*28*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*29*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*30*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*31*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*32*/{0,-9,1,-9,5,-9,7,-9,9,-9,11,-9,13,-9,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,-9,30,-9,31,-9,34,-9,35,-9,37,-9,38,-9,42,-9,43,-9,44,-9,-1,0},
    /*33*/{0,-19,1,-19,5,-19,7,-19,9,-19,11,-19,13,-19,15,26,16,21,17,30,18,23,25,-19,26,-19,30,-19,31,-19,34,-19,35,-19,37,-19,38,-19,42,-19,43,-19,44,-19,-1,0},
    /*34*/{0,-15,1,-15,5,-15,7,-15,9,-15,11,-15,13,-15,15,-15,16,-15,17,-15,18,-15,19,-15,20,-15,21,-15,22,-15,23,-15,24,-15,25,-15,26,-15,30,-15,31,-15,34,-15,35,-15,37,-15,38,-15,42,-15,43,-15,44,-15,-1,0},
    /*35*/{0,-21,1,-21,5,-21,7,-21,9,-21,11,-21,13,-21,15,26,16,21,17,30,18,23,25,-21,26,-21,30,-21,31,-21,34,-21,35,-21,37,-21,38,-21,42,-21,43,-21,44,-21,-1,0},
    /*36*/{0,-20,1,-20,5,-20,7,-20,9,-20,11,-20,13,-20,15,26,16,21,17,30,18,23,25,-20,26,-20,30,-20,31,-20,34,-20,35,-20,37,-20,38,-20,42,-20,43,-20,44,-20,-1,0},
    /*37*/{0,-17,1,-17,5,-17,7,-17,9,-17,11,-17,13,-17,15,26,16,21,17,30,18,23,25,-17,26,-17,30,-17,31,-17,34,-17,35,-17,37,-17,38,-17,42,-17,43,-17,44,-17,-1,0},
    /*38*/{0,-13,1,-13,5,-13,7,-13,9,-13,11,-13,13,-13,15,-13,16,-13,17,30,18,23,19,-13,20,-13,21,-13,22,-13,23,-13,24,-13,25,-13,26,-13,30,-13,31,-13,34,-13,35,-13,37,-13,38,-13,42,-13,43,-13,44,-13,-1,0},
    /*39*/{0,-18,1,-18,5,-18,7,-18,9,-18,11,-18,13,-18,15,26,16,21,17,30,18,23,25,-18,26,-18,30,-18,31,-18,34,-18,35,-18,37,-18,38,-18,42,-18,43,-18,44,-18,-1,0},
    /*40*/{0,-22,1,-22,5,-22,7,-22,9,-22,11,-22,13,-22,15,26,16,21,17,30,18,23,25,-22,26,-22,30,-22,31,-22,34,-22,35,-22,37,-22,38,-22,42,-22,43,-22,44,-22,-1,0},
    /*41*/{0,-16,1,-16,5,-16,7,-16,9,-16,11,-16,13,-16,15,-16,16,-16,17,-16,18,-16,19,-16,20,-16,21,-16,22,-16,23,-16,24,-16,25,-16,26,-16,30,-16,31,-16,34,-16,35,-16,37,-16,38,-16,42,-16,43,-16,44,-16,-1,0},
    /*42*/{0,-8,1,-8,5,-8,7,-8,9,-8,11,-8,13,-8,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,-8,26,-8,30,-8,31,-8,34,-8,35,-8,37,-8,38,-8,42,-8,43,-8,44,-8,-1,0},
    /*43*/{0,-14,1,-14,5,-14,7,-14,9,-14,11,-14,13,-14,15,-14,16,-14,17,30,18,23,19,-14,20,-14,21,-14,22,-14,23,-14,24,-14,25,-14,26,-14,30,-14,31,-14,34,-14,35,-14,37,-14,38,-14,42,-14,43,-14,44,-14,-1,0},
    /*44*/{0,-37,1,-37,5,-37,7,-37,9,-37,10,-37,11,-37,13,-37,14,-37,15,-37,16,-37,17,-37,18,-37,19,-37,20,-37,21,-37,22,-37,23,-37,24,-37,25,-37,26,-37,27,-37,30,-37,31,-37,34,-37,35,-37,37,-37,38,-37,42,-37,43,-37,44,-37,-1,0},
    /*45*/{9,-34,38,-34,-1,0},
    /*46*/{9,-36,38,-36,-1,0},
    /*47*/{7,51,9,-35,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,38,-35,-1,0},
    /*48*/{9,50,-1,0},
    /*49*/{0,-5,1,-5,5,-5,7,-5,9,-5,11,-5,13,-5,15,-5,16,-5,17,-5,18,-5,19,-5,20,-5,21,-5,22,-5,23,-5,24,-5,25,-5,26,-5,30,-5,31,-5,34,-5,35,-5,37,-5,38,-5,42,-5,43,-5,44,-5,-1,0},
    /*50*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*51*/{9,-62,38,-62,-1,0},
    /*52*/{7,51,9,-61,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,38,-61,-1,0},
    /*53*/{9,-60,38,-60,-1,0},
    /*54*/{37,103,-1,0},
    /*55*/{2,99,-1,0},
    /*56*/{1,-46,37,-46,42,-46,43,-46,44,-46,-1,0},
    /*57*/{1,-43,37,-43,42,-43,43,-43,44,-43,-1,0},
    /*58*/{2,87,-1,0},
    /*59*/{2,64,-1,0},
    /*60*/{1,58,37,-41,42,59,43,56,44,60,-1,0},
    /*61*/{1,-44,37,-44,42,-44,43,-44,44,-44,-1,0},
    /*62*/{37,-42,-1,0},
    /*63*/{19,65,-1,0},
    /*64*/{2,66,12,67,28,69,-1,0},
    /*65*/{1,-76,37,-76,42,-76,43,-76,44,-76,-1,0},
    /*66*/{1,76,2,75,13,-71,-1,0},
    /*67*/{1,-68,37,-68,42,-68,43,-68,44,60,-1,0},
    /*68*/{39,70,-1,0},
    /*69*/{2,71,-1,0},
    /*70*/{1,-78,37,-78,42,-78,43,-78,44,-78,-1,0},
    /*71*/{1,-69,37,-69,42,-69,43,-69,44,-69,-1,0},
    /*72*/{1,-47,37,-47,42,-47,43,-47,44,-47,-1,0},
    /*73*/{13,86,-1,0},
    /*74*/{6,77,-1,0},
    /*75*/{9,-70,13,-70,-1,0},
    /*76*/{2,78,-1,0},
    /*77*/{1,80,5,79,9,-66,13,-66,-1,0},
    /*78*/{2,82,-1,0},
    /*79*/{9,-65,13,-65,-1,0},
    /*80*/{9,-72,13,-72,-1,0},
    /*81*/{6,83,-1,0},
    /*82*/{2,84,-1,0},
    /*83*/{1,80,5,79,9,-66,13,-66,-1,0},
    /*84*/{9,-67,13,-67,-1,0},
    /*85*/{1,-77,37,-77,42,-77,43,-77,44,-77,-1,0},
    /*86*/{8,88,-1,0},
    /*87*/{1,76,2,75,9,-71,-1,0},
    /*88*/{9,90,-1,0},
    /*89*/{1,91,6,92,19,-74,-1,0},
    /*90*/{19,-73,27,-73,-1,0},
    /*91*/{2,98,-1,0},
    /*92*/{19,94,-1,0},
    /*93*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*94*/{1,-63,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,37,-63,42,59,43,-63,44,-63,-1,0},
    /*95*/{1,-48,37,-48,42,-48,43,-48,44,-48,-1,0},
    /*96*/{1,-64,37,-64,42,-64,43,-64,44,-64,-1,0},
    /*97*/{19,-75,27,-75,-1,0},
    /*98*/{1,91,6,92,27,-74,-1,0},
    /*99*/{27,101,-1,0},
    /*100*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*101*/{1,-45,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,37,-45,42,-45,43,-45,44,-45,-1,0},
    /*102*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,38,-79,40,16,41,7,-1,0},
    /*103*/{38,105,-1,0},
    /*104*/{0,-4,1,-4,5,-4,7,-4,9,-4,11,-4,13,-4,15,-4,16,-4,17,-4,18,-4,19,-4,20,-4,21,-4,22,-4,23,-4,24,-4,25,-4,26,-4,30,-4,31,-4,34,-4,35,-4,37,-4,38,-4,42,-4,43,-4,44,-4,-1,0},
    /*105*/{1,122,2,121,13,-55,-1,0},
    /*106*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*107*/{1,13,2,12,3,9,4,3,8,15,9,-49,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*108*/{9,116,-1,0},
    /*109*/{1,112,5,111,9,-52,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,-1,0},
    /*110*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*111*/{9,-51,-1,0},
    /*112*/{9,-50,-1,0},
    /*113*/{1,112,5,111,9,-52,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,-1,0},
    /*114*/{9,-53,-1,0},
    /*115*/{0,-28,1,-28,5,-28,7,-28,9,-28,11,-28,13,-28,15,-28,16,-28,17,-28,18,-28,19,-28,20,-28,21,-28,22,-28,23,-28,24,-28,25,-28,26,-28,30,-28,31,-28,34,-28,35,-28,37,-28,38,-28,42,-28,43,-28,44,-28,-1,0},
    /*116*/{11,118,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,-1,0},
    /*117*/{0,-38,1,-38,5,-38,7,-38,9,-38,10,-38,11,-38,13,-38,14,-38,15,-38,16,-38,17,-38,18,-38,19,-38,20,-38,21,-38,22,-38,23,-38,24,-38,25,-38,26,-38,27,-38,30,-38,31,-38,34,-38,35,-38,37,-38,38,-38,39,119,42,-38,43,-38,44,-38,-1,0},
    /*118*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*119*/{0,-26,1,-26,5,-26,7,-26,9,-26,11,-26,13,-26,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,30,-26,31,-26,34,-26,35,-26,37,-26,38,-26,42,-26,43,-26,44,-26,-1,0},
    /*120*/{19,125,-1,0},
    /*121*/{13,-54,-1,0},
    /*122*/{13,124,-1,0},
    /*123*/{0,-11,1,-11,5,-11,7,-11,9,-11,11,-11,13,-11,15,-11,16,-11,17,-11,18,-11,19,-11,20,-11,21,-11,22,-11,23,-11,24,-11,25,-11,26,-11,30,-11,31,-11,34,-11,35,-11,37,-11,38,-11,42,-11,43,-11,44,-11,-1,0},
    /*124*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*125*/{1,129,5,128,13,-58,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,-1,0},
    /*126*/{13,-56,-1,0},
    /*127*/{2,130,-1,0},
    /*128*/{13,-57,-1,0},
    /*129*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*130*/{1,129,5,128,13,-58,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,-1,0},
    /*131*/{13,-59,-1,0},
    /*132*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*133*/{11,135,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,-1,0},
    /*134*/{0,-40,1,-40,5,-40,7,-40,9,-40,10,-40,11,-40,13,-40,14,-40,15,-40,16,-40,17,-40,18,-40,19,-40,20,-40,21,-40,22,-40,23,-40,24,-40,25,-40,26,-40,27,-40,30,-40,31,-40,34,-40,35,-40,37,-40,38,-40,42,-40,43,-40,44,-40,-1,0},
    /*135*/{15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,30,137,-1,0},
    /*136*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*137*/{0,-6,1,-6,5,-6,7,-6,9,-6,11,-6,13,-6,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,30,-6,31,139,34,-6,35,-6,37,-6,38,-6,42,-6,43,-6,44,-6,-1,0},
    /*138*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*139*/{0,-7,1,-7,5,-7,7,-7,9,-7,11,-7,13,-7,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,30,-7,31,-7,34,-7,35,-7,37,-7,38,-7,42,-7,43,-7,44,-7,-1,0},
    /*140*/{0,-1,-1,0},
    /*141*/{27,143,-1,0},
    /*142*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*143*/{15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,34,145,-1,0},
    /*144*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*145*/{15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,35,147,-1,0},
    /*146*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*147*/{0,-30,1,-30,5,-30,7,-30,9,-30,11,-30,13,-30,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,30,-30,31,-30,34,-30,35,-30,37,-30,38,-30,42,-30,43,-30,44,-30,-1,0},
    /*148*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*149*/{11,151,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,-1,0},
    /*150*/{0,-39,1,-39,5,-39,7,-39,9,-39,10,-39,11,-39,13,-39,14,-39,15,-39,16,-39,17,-39,18,-39,19,-39,20,-39,21,-39,22,-39,23,-39,24,-39,25,-39,26,-39,27,-39,30,-39,31,-39,34,-39,35,-39,37,-39,38,-39,42,-39,43,-39,44,-39,-1,0},
    /*151*/{15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,35,153,-1,0},
    /*152*/{1,13,2,12,3,9,4,3,8,15,16,2,29,10,32,4,33,6,36,14,40,16,41,7,-1,0},
    /*153*/{0,-25,1,-25,5,-25,7,-25,9,-25,11,-25,13,-25,15,26,16,21,17,30,18,23,19,27,20,25,21,31,22,28,23,29,24,24,25,22,26,32,30,-25,31,-25,34,-25,35,-25,37,-25,38,-25,42,-25,43,-25,44,-25,-1,0},
    /*154*/{0,-23,1,-23,5,-23,7,-23,9,-23,11,-23,13,-23,15,-23,16,-23,17,30,18,23,19,-23,20,-23,21,-23,22,-23,23,-23,24,-23,25,-23,26,-23,30,-23,31,-23,34,-23,35,-23,37,-23,38,-23,42,-23,43,-23,44,-23,-1,0},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{1,7,2,16,8,4,9,10,-1,-1},
    /*1*/{1,154,2,16,8,4,9,10,-1,-1},
    /*2*/{-1,-1},
    /*3*/{1,151,2,16,8,4,9,10,-1,-1},
    /*4*/{-1,-1},
    /*5*/{-1,-1},
    /*6*/{-1,-1},
    /*7*/{-1,-1},
    /*8*/{-1,-1},
    /*9*/{1,135,2,16,8,4,9,10,-1,-1},
    /*10*/{-1,-1},
    /*11*/{-1,-1},
    /*12*/{-1,-1},
    /*13*/{10,54,11,60,12,56,14,61,-1,-1},
    /*14*/{1,47,2,16,3,48,6,46,8,4,9,10,22,45,-1,-1},
    /*15*/{-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{1,19,2,16,8,4,9,10,-1,-1},
    /*19*/{-1,-1},
    /*20*/{1,43,2,16,8,4,9,10,-1,-1},
    /*21*/{1,42,2,16,8,4,9,10,-1,-1},
    /*22*/{1,41,2,16,8,4,9,10,-1,-1},
    /*23*/{1,40,2,16,8,4,9,10,-1,-1},
    /*24*/{1,39,2,16,8,4,9,10,-1,-1},
    /*25*/{1,38,2,16,8,4,9,10,-1,-1},
    /*26*/{1,37,2,16,8,4,9,10,-1,-1},
    /*27*/{1,36,2,16,8,4,9,10,-1,-1},
    /*28*/{1,35,2,16,8,4,9,10,-1,-1},
    /*29*/{1,34,2,16,8,4,9,10,-1,-1},
    /*30*/{1,33,2,16,8,4,9,10,-1,-1},
    /*31*/{1,32,2,16,8,4,9,10,-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{-1,-1},
    /*46*/{-1,-1},
    /*47*/{-1,-1},
    /*48*/{-1,-1},
    /*49*/{-1,-1},
    /*50*/{1,52,2,16,6,51,7,53,8,4,9,10,-1,-1},
    /*51*/{-1,-1},
    /*52*/{-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{-1,-1},
    /*57*/{-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{10,62,11,60,12,56,14,61,-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{16,67,-1,-1},
    /*65*/{-1,-1},
    /*66*/{18,73,-1,-1},
    /*67*/{12,71,13,72,-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{-1,-1},
    /*73*/{-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{-1,-1},
    /*77*/{19,80,-1,-1},
    /*78*/{-1,-1},
    /*79*/{-1,-1},
    /*80*/{-1,-1},
    /*81*/{-1,-1},
    /*82*/{-1,-1},
    /*83*/{19,84,-1,-1},
    /*84*/{-1,-1},
    /*85*/{-1,-1},
    /*86*/{-1,-1},
    /*87*/{18,88,-1,-1},
    /*88*/{-1,-1},
    /*89*/{17,92,-1,-1},
    /*90*/{-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{1,94,2,16,8,4,9,10,-1,-1},
    /*94*/{14,96,15,95,-1,-1},
    /*95*/{-1,-1},
    /*96*/{-1,-1},
    /*97*/{-1,-1},
    /*98*/{17,99,-1,-1},
    /*99*/{-1,-1},
    /*100*/{1,101,2,16,8,4,9,10,-1,-1},
    /*101*/{-1,-1},
    /*102*/{1,47,2,16,3,103,6,46,8,4,9,10,22,45,-1,-1},
    /*103*/{-1,-1},
    /*104*/{-1,-1},
    /*105*/{20,122,-1,-1},
    /*106*/{1,116,2,16,8,4,9,10,-1,-1},
    /*107*/{1,109,2,16,4,108,8,4,9,10,-1,-1},
    /*108*/{-1,-1},
    /*109*/{5,112,-1,-1},
    /*110*/{1,113,2,16,8,4,9,10,-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{5,114,-1,-1},
    /*114*/{-1,-1},
    /*115*/{-1,-1},
    /*116*/{-1,-1},
    /*117*/{-1,-1},
    /*118*/{1,119,2,16,8,4,9,10,-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{1,125,2,16,8,4,9,10,-1,-1},
    /*125*/{21,126,-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{-1,-1},
    /*129*/{1,130,2,16,8,4,9,10,-1,-1},
    /*130*/{21,131,-1,-1},
    /*131*/{-1,-1},
    /*132*/{1,133,2,16,8,4,9,10,-1,-1},
    /*133*/{-1,-1},
    /*134*/{-1,-1},
    /*135*/{-1,-1},
    /*136*/{1,137,2,16,8,4,9,10,-1,-1},
    /*137*/{-1,-1},
    /*138*/{1,139,2,16,8,4,9,10,-1,-1},
    /*139*/{-1,-1},
    /*140*/{-1,-1},
    /*141*/{-1,-1},
    /*142*/{1,143,2,16,8,4,9,10,-1,-1},
    /*143*/{-1,-1},
    /*144*/{1,145,2,16,8,4,9,10,-1,-1},
    /*145*/{-1,-1},
    /*146*/{1,147,2,16,8,4,9,10,-1,-1},
    /*147*/{-1,-1},
    /*148*/{1,149,2,16,8,4,9,10,-1,-1},
    /*149*/{-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{1,153,2,16,8,4,9,10,-1,-1},
    /*153*/{-1,-1},
    /*154*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    

  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // empty ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*empty*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // type ::= ARRAY OF ID 
            {
              Absyn.Ty RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayTy(aleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // type ::= LBRACE fields RBRACE 
            {
              Absyn.Ty RESULT = null;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lbrace = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int fldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int fldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldList fld = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.RecordTy(lbraceleft, fld); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // type ::= ID 
            {
              Absyn.Ty RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // nameType ::= COLON ID 
            {
              Absyn.NameTy RESULT = null;
		int colleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NameTy(colleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*nameType*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // nameType ::= 
            {
              Absyn.NameTy RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*nameType*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // nameType ::= error 
            {
              Absyn.NameTy RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(17/*nameType*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // fields ::= ID COLON ID optFields 
            {
              Absyn.FieldList RESULT = null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldList fld = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(colleft, sym(n1), sym(n2), fld); 
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // fields ::= 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // fields ::= error 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*fields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // optTypes ::= typeDec 
            {
              Absyn.TypeDec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec t = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = t; 
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*optTypes*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // optTypes ::= 
            {
              Absyn.TypeDec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(13/*optTypes*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // optFields ::= COMMA ID COLON ID optFields 
            {
              Absyn.FieldList RESULT = null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int n1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldList fld = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldList(comleft, sym(n1), sym(n2), fld); 
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*optFields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // optFields ::= 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*optFields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // optFields ::= error 
            {
              Absyn.FieldList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*optFields*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // optFunctions ::= functionDec 
            {
              Absyn.FunctionDec RESULT = null;
		int fundecleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fundecright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec fundec = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = fundec; 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*optFunctions*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // optFunctions ::= 
            {
              Absyn.FunctionDec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(15/*optFunctions*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // seqTail ::= sequence 
            {
              Absyn.ExpList RESULT = null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList seq = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = seq; 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*seqTail*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // seqTail ::= Exp 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e,null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*seqTail*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sequence ::= Exp SEMICOLON seqTail 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList s = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e,s); 
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*sequence*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // optFieldExps ::= COMMA ID Exp optFieldExps 
            {
              Absyn.FieldExpList RESULT = null;
		int comleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object com = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldExpList fld = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(comleft, sym(n), e, fld); 
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*optFieldExps*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // optFieldExps ::= 
            {
              Absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*optFieldExps*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // optFieldExps ::= error 
            {
              Absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(21/*optFieldExps*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // fieldExps ::= ID EQ Exp optFieldExps 
            {
              Absyn.FieldExpList RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldExpList fld = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldExpList(eqleft, sym(n), e, fld); 
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*fieldExps*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // fieldExps ::= 
            {
              Absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*fieldExps*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // fieldExps ::= error 
            {
              Absyn.FieldExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(20/*fieldExps*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // optArguments ::= COMMA Exp optArguments 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList args = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, args); 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*optArguments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // optArguments ::= 
            {
              Absyn.ExpList RESULT = null;
		 RESULT = null; 
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*optArguments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // optArguments ::= error 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(5/*optArguments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // arguments ::= Exp optArguments 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList args = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, args); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*arguments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // arguments ::= 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(4/*arguments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // functionDec ::= FUNCTION ID LPAREN fields RPAREN nameType EQ Exp optFunctions 
            {
              Absyn.FunctionDec RESULT = null;
		int fuleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left;
		int furight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).right;
		Object fu = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-8)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int fldleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int fldright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Absyn.FieldList fld = (Absyn.FieldList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int Ntypeleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int Ntyperight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.NameTy Ntype = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec f = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FunctionDec(fuleft,sym(n),fld,Ntype,e,f); 
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*functionDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // typeDec ::= TYPE ID EQ type optTypes 
            {
              Absyn.TypeDec RESULT = null;
		int ty1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int ty1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object ty1 = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int eqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int ty2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int ty2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Ty ty2 = (Absyn.Ty)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int ty3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int ty3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec ty3 = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.TypeDec(ty1left,sym(n), ty2, ty3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*typeDec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // dec ::= typeDec 
            {
              Absyn.Dec RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.TypeDec t = (Absyn.TypeDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = t; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // dec ::= VAR ID nameType ASSIGN Exp 
            {
              Absyn.Dec RESULT = null;
		int valeft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int ntypeleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int ntyperight = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.NameTy ntype = (Absyn.NameTy)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarDec(valeft,sym(n),ntype,e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // dec ::= functionDec 
            {
              Absyn.Dec RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FunctionDec f = (Absyn.FunctionDec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = f; 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // dec ::= error 
            {
              Absyn.Dec RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(11/*dec*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // decList ::= dec decList 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.DecList ds = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d,ds); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // decList ::= dec 
            {
              Absyn.DecList RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Dec d = (Absyn.Dec)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.DecList(d,null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*decList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // subscriptVar ::= subscriptVar LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT = null;
		int subleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.SubscriptVar sub = (Absyn.SubscriptVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(lbrackleft,sub,e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*subscriptVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // subscriptVar ::= fieldVar LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT = null;
		int flleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.FieldVar fl = (Absyn.FieldVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(lbrackleft,fl,e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*subscriptVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // subscriptVar ::= ID LBRACK Exp RBRACK 
            {
              Absyn.SubscriptVar RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SubscriptVar(lbrackleft, new Absyn.SimpleVar(nleft,sym(n)),e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*subscriptVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fieldVar ::= Var DOT ID 
            {
              Absyn.FieldVar RESULT = null;
		int vrleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vrright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var vr = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.FieldVar(sleft,vr,sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*fieldVar*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ExpList ::= sequence 
            {
              Absyn.ExpList RESULT = null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.ExpList seq = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = seq; 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ExpList ::= Exp 
            {
              Absyn.ExpList RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ExpList(e, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ExpList ::= empty 
            {
              Absyn.ExpList RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(3/*ExpList*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Var ::= subscriptVar 
            {
              Absyn.Var RESULT = null;
		int subleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.SubscriptVar sub = (Absyn.SubscriptVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = sub; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Var ::= fieldVar 
            {
              Absyn.Var RESULT = null;
		int flVarleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int flVarright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.FieldVar flVar = (Absyn.FieldVar)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = flVar; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Var ::= ID 
            {
              Absyn.Var RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= FOR ID ASSIGN Exp TO Exp DO Exp 
            {
              Absyn.Exp RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-6)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ForExp(fleft, new Absyn.VarDec(assignleft, sym(n), null, e1), e2, e3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Var ASSIGN Exp 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int assignleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int assignright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object assign = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(assignleft, v, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= ID LPAREN arguments RPAREN 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList args = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.CallExp(lpleft, sym(n), args); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= BREAK 
            {
              Absyn.Exp RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.BreakExp(bleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= ID LBRACK Exp RBRACK OF Exp 
            {
              Absyn.Exp RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int lbrackleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int lbrackright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Object lbrack = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.ArrayExp(lbrackleft, sym(n), e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp ::= WHILE Exp DO Exp 
            {
              Absyn.Exp RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.WhileExp(wleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp ::= STRING 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.StringExp(sleft, (String)(s)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp ::= MINUS Exp 
            {
              Absyn.Exp RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, new Absyn.IntExp(opleft,0),1,e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp ::= Exp GE Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, e1,9,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp ::= Exp GT Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, e1,8,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp ::= Exp LE Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, e1,7,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp ::= Exp LT Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, e1,6,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp ::= Exp NEQ Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, e1,5,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp ::= Exp EQ Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, e1,4,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp ::= Exp DIVIDE Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, e1,3,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp ::= Exp TIMES Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, e1,2,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp ::= Exp MINUS Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft, e1,1,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp ::= Exp PLUS Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(opleft,e1,0,e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp ::= NIL 
            {
              Absyn.Exp RESULT = null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.NilExp(nilleft); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp ::= ID LBRACE fieldExps RBRACE 
            {
              Absyn.Exp RESULT = null;
		int type_idleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int type_idright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		String type_id = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int lbraceleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lbraceright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lbrace = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int f1dleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int f1dright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.FieldExpList f1d = (Absyn.FieldExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.RecordExp(lbraceleft, sym(type_id), f1d); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp ::= INT 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IntExp(ileft, i.intValue()); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp ::= Exp OR Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(opleft, e1, new Absyn.IntExp(opleft,1),e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp ::= Exp AND Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(opleft, e1, e2, new Absyn.IntExp(opleft,0)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp ::= IF Exp THEN Exp ELSE Exp 
            {
              Absyn.Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e3 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(ileft, e1, e2, e3); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp ::= IF Exp THEN Exp 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int theleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int theright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object the = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.IfExp(theleft, e1, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp ::= LPAREN ExpList RPAREN 
            {
              Absyn.Exp RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int exListleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int exListright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList exList = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.SeqExp(lpleft, exList); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp ::= LET decList IN ExpList END 
            {
              Absyn.Exp RESULT = null;
		int dlistleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left;
		int dlistright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).right;
		Absyn.DecList dlist = (Absyn.DecList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-3)).value;
		int inleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int inright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Object in = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int exListleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int exListright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.ExpList exList = (Absyn.ExpList)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = new Absyn.LetExp(inleft, dlist, new Absyn.SeqExp(exListleft, exList)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Exp ::= Var 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(vleft, v); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Exp ::= error 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SeqExp(eleft, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*Exp*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Exp EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp start_val = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

